{"version":3,"sources":["Hoc/BoxHoc.js","component/MessageBox/index.js","layout/index.js","App.js","serviceWorker.js","index.js"],"names":["Comp","MessageBox","props","listitem","state","worklist","map","item","key","id","href","post","className","city","time","title","this","Component","HocMessageBox","LayOut","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yNAEsBA,E,0ECADC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA4DTC,SAAS,WAEN,OADkB,EAAKC,MAAfC,SACSC,KAAI,SAAAC,GAAI,OACrB,wBAAIC,IAAKD,EAAKE,IACV,8BAAM,uBAAGC,KAAK,KAAKH,EAAKI,OACxB,0BAAMC,UAAU,QAAQL,EAAKM,MAC7B,0BAAMD,UAAU,QAAQL,EAAKO,KAA7B,2BAhER,EAAKV,MAAQ,CACTW,MAAM,2BACLV,SAAS,CACL,CACGI,GAAG,EACHE,KAAK,yDACLE,KAAK,eACLC,KAAK,GACN,CACCL,GAAG,EACHE,KAAK,yDACLE,KAAK,eACLC,KAAK,GACN,CACCL,GAAG,EACHE,KAAK,yDACLE,KAAK,eACLC,KAAK,GACN,CACCL,GAAG,EACHE,KAAK,yDACLE,KAAK,eACLC,KAAK,GACN,CACCL,GAAG,EACHE,KAAK,yDACLE,KAAK,eACLC,KAAK,GACN,CACCL,GAAG,EACHE,KAAK,yDACLE,KAAK,eACLC,KAAK,GAER,CACGL,GAAG,EACHE,KAAK,yDACLE,KAAK,eACLC,KAAK,GACN,CACCL,GAAG,EACHE,KAAK,yDACLE,KAAK,eACLC,KAAK,GACN,CACCL,GAAG,EACHE,KAAK,yDACLE,KAAK,eACLC,KAAK,GACN,CACCL,GAAG,GACHE,KAAK,yDACLE,KAAK,eACLC,KAAK,KAxDF,E,qDAwEf,OACI,kBAAC,WAAD,KACKE,KAAKb,gB,GA3EkBc,aCCjCC,G,MFDelB,EECMC,EFAxB,uKAIQ,OACI,yBAAKW,UAAU,WACX,yBAAKA,UAAU,UACX,2BAAII,KAAKd,MAAMa,OACf,+CAEJ,yBAAKH,UAAU,QACX,wBAAIA,UAAU,QACV,kBAACZ,EAASgB,KAAKd,cAZvC,GAAuBe,cECNE,E,kDACjB,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IAEDE,MAAQ,CACRW,MAAM,4BAJI,E,qDAST,IACCA,EAAOC,KAAKZ,MAAZW,MACP,OACI,6BACC,kBAACG,EAAD,CAAgBH,MAAOA,S,GAdAE,aCQrBG,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCKcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.756bb97c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../component/MessageBox/index.scss'\r\nexport const BoxHoc = Comp => {\r\n    return class _ extends Component {\r\n        // 复用逻辑\r\n      \r\n        render() {\r\n            return (\r\n                <div className=\"contain\" >\r\n                    <div className='header'>\r\n                        <b>{this.props.title}</b>\r\n                        <span>更多</span>\r\n                    </div>\r\n                    <div className=\"body\">\r\n                        <ul className='list'>\r\n                            <Comp {...this.props} />\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n               \r\n            )\r\n        }\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\n// import './index.scss'\r\nexport default class MessageBox extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            title:'最新职位',\r\n             worklist:[\r\n                 {\r\n                    id:1,\r\n                    post:'喀什发你哈接口是否',\r\n                    city:'上海',\r\n                    time:1\r\n                 },{\r\n                    id:2,\r\n                    post:'喀什发你哈接口是否',\r\n                    city:'上海',\r\n                    time:1\r\n                 },{\r\n                    id:3,\r\n                    post:'喀什发你哈接口是否',\r\n                    city:'上海',\r\n                    time:1\r\n                 },{\r\n                    id:4,\r\n                    post:'喀什发你哈接口是否',\r\n                    city:'上海',\r\n                    time:1\r\n                 },{\r\n                    id:5,\r\n                    post:'喀什发你哈接口是否',\r\n                    city:'上海',\r\n                    time:1\r\n                 },{\r\n                    id:6,\r\n                    post:'喀什发你哈接口是否',\r\n                    city:'上海',\r\n                    time:1\r\n                 },\r\n                 {\r\n                    id:7,\r\n                    post:'喀什发你哈接口是否',\r\n                    city:'上海',\r\n                    time:1\r\n                 },{\r\n                    id:8,\r\n                    post:'喀什发你哈接口是否',\r\n                    city:'上海',\r\n                    time:1\r\n                 },{\r\n                    id:9,\r\n                    post:'喀什发你哈接口是否',\r\n                    city:'上海',\r\n                    time:1\r\n                 },{\r\n                    id:10,\r\n                    post:'喀什发你哈接口是否',\r\n                    city:'上海',\r\n                    time:1\r\n                 }\r\n             ]\r\n        }\r\n    }\r\n     listitem=()=>{\r\n         const {worklist}=this.state\r\n        return  worklist.map(item=>(\r\n            <li key={item.id}> \r\n                <span><a href=\"#\">{item.post}</a></span>\r\n                <span className=\"city\">{item.city}</span>\r\n                <span className=\"time\">{item.time}小时前</span>\r\n            </li>\r\n        ))    \r\n    }\r\n    render() {\r\n        return (\r\n            <Fragment >\r\n                {this.listitem()}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport MessageBox from '../component/MessageBox'\r\nimport {BoxHoc} from '../Hoc/BoxHoc'\r\nconst  HocMessageBox=BoxHoc(MessageBox)\r\nexport default class LayOut extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             title:'最新职位',\r\n          \r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const {title}=this.state\r\n        return (\r\n            <div>\r\n             <HocMessageBox  title={title}></HocMessageBox>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport LayOut from './layout/index'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LayOut></LayOut>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}